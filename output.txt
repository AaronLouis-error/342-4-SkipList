Sun Nov 22 23:34:51 PST 2020
Linux csslab7.uwb.edu 3.10.0-1127.19.1.el7.x86_64 #1 SMP Tue Aug 25 17:23:54 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
uid=1091439(dhimitri) gid=2121091439(dhimitri) groups=2121091439(dhimitri),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
4: 9
3: 9
2: 5-->9
1: 3-->5-->7-->9
0: 1-->3-->5-->7-->9

7 ? true
3 ? true
-100 ? false
100 ? false
4: 9
3: 9
2: 9
1: 3-->7-->9
0: 1-->3-->7-->9

4: 
3: 
2: 
1: 
0: 

4: 
3: 9
2: 9
1: 5-->9
0: 3-->5-->8-->9

Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
12122 warnings generated.
24364 warnings generated.
Suppressed 24364 warnings (24364 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
Running clang-format on ./skiplist.cpp
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==29774== Memcheck, a memory error detector
==29774== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==29774== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==29774== Command: ./a.out
==29774== Parent PID: 29708
==29774== 
==29774== 
==29774== HEAP SUMMARY:
==29774==     in use at exit: 0 bytes in 0 blocks
==29774==   total heap usage: 132 allocs, 132 frees, 76,500 bytes allocated
==29774== 
==29774== All heap blocks were freed -- no leaks are possible
==29774== 
==29774== For lists of detected and suppressed errors, rerun with: -s
==29774== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/dhimitri/2020au342c-p4-skiplist-dhimitrimano/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        21       0 100.00%
test2()                           1       0 100.00%        19       0 100.00%
main                              1       0 100.00%         8       0 100.00%
-----------------------------------------------------------------------------
TOTAL                             3       0 100.00%        48       0 100.00%

File '/home/NETID/dhimitri/2020au342c-p4-skiplist-dhimitrimano/skiplist.cpp':
Name                                                           Regions    Miss   Cover     Lines    Miss   Cover
----------------------------------------------------------------------------------------------------------------
operator<<(std::ostream&, SkipList const&)                          10       0 100.00%        16       0 100.00%
SNode::SNode(int)                                                    1       0 100.00%         1       0 100.00%
SkipList::SkipList(int, int)                                         4       0 100.00%        11       0 100.00%
SkipList::shouldInsertAtHigher() const                               1       0 100.00%         3       0 100.00%
SkipList::getNode(int) const                                        11       0 100.00%        13       0 100.00%
SkipList::getBeforeNodes(int) const                                  8       0 100.00%        12       0 100.00%
SkipList::add(int)                                                  13       0 100.00%        21       0 100.00%
SkipList::add(std::vector<int, std::allocator<int> > const&)         4       0 100.00%         9       0 100.00%
SkipList::~SkipList()                                                3       0 100.00%         9       0 100.00%
SkipList::remove(int)                                                7       0 100.00%        12       0 100.00%
SkipList::contains(int) const                                        1       0 100.00%         1       0 100.00%
----------------------------------------------------------------------------------------------------------------
TOTAL                                                               63       0 100.00%       108       0 100.00%
/home/NETID/dhimitri/2020au342c-p4-skiplist-dhimitrimano/main.cpp:
    1|       |#include <cassert>
    2|       |#include <climits>
    3|       |#include <iostream>
    4|       |
    5|       |#include "skiplist.h"
    6|       |
    7|       |using namespace std;
    8|       |
    9|      1|void test1() {
   10|      1|  // setting seed for easy testing
   11|      1|  srand(10000);
   12|      1|  SkipList skp(5, 80);
   13|      1|  cout << boolalpha;
   14|      1|  skp.add(3);
   15|      1|  skp.add(5);
   16|      1|  skp.add(vector<int>{1, 7, 9});
   17|      1|  // cannot add existing
   18|      1|  assert(!skp.add(vector<int>{1, 7}));
   19|      1|  cout << skp << endl;
   20|      1|  cout << "7 ? " << skp.contains(7) << endl;
   21|      1|  cout << "3 ? " << skp.contains(3) << endl;
   22|      1|  cout << "-100 ? " << skp.contains(-100) << endl;
   23|      1|  cout << "100 ? " << skp.contains(100) << endl;
   24|      1|  bool result = skp.remove(5);
   25|      1|  assert(result);
   26|      1|  result = skp.remove(5);
   27|      1|  assert(!result);
   28|      1|  cout << skp << endl;
   29|      1|}
   30|       |
   31|      1|void test2() {
   32|      1|  srand(1000);
   33|      1|  SkipList skp(5, 50);
   34|      1|  cout << boolalpha;
   35|      1|  cout << skp << endl;
   36|      1|  skp.add(3);
   37|      1|  skp.add(8);
   38|      1|  skp.add(5);
   39|      1|  skp.add(9);
   40|      1|  skp.contains(8);
   41|      1|  skp.contains(5);
   42|      1|  skp.contains(9);
   43|      1|  skp.contains(3);
   44|      1|  bool result = skp.add(INT_MAX);
   45|      1|  assert(!result);
   46|      1|  result = skp.add(INT_MIN);
   47|      1|  assert(!result);
   48|      1|  cout << skp << endl;
   49|      1|}
   50|       |
   51|      1|int main() {
   52|      1|
   53|      1|  test1();
   54|      1|  test2();
   55|      1|
   56|      1|  cout << "Done." << endl;
   57|      1|  return 0;
   58|      1|}

/home/NETID/dhimitri/2020au342c-p4-skiplist-dhimitrimano/skiplist.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/26/18.
    3|       |//
    4|       |
    5|       |#include <cassert>
    6|       |#include <climits>
    7|       |#include <cstdlib>
    8|       |#include <iostream>
    9|       |
   10|       |#include "skiplist.h"
   11|       |
   12|       |using namespace std;
   13|       |
   14|      4|ostream &operator<<(ostream &out, const SkipList &skip) {
   15|     24|  for (int d = skip.maxLevel - 1; d >= 0; d--) {
   16|     20|    out << d << ": ";
   17|     20|    auto *curr = skip.head->forward[d];
   18|     20|    if (curr != skip.tail) {
   19|     14|      out << curr->value;
   20|     14|      curr = curr->forward[d];
   21|     14|    }
   22|     37|    while (curr != nullptr && curr != skip.tail) {
   23|     17|      out << "-->" << curr->value;
   24|     17|      curr = curr->forward[d];
   25|     17|    }
   26|     20|    out << endl;
   27|     20|  }
   28|      4|  return out;
   29|      4|}
   30|       |
   31|     15|SNode::SNode(int value) : value{value} {}
   32|       |
   33|       |SkipList::SkipList(int maxLevel, int probability)
   34|      2|    : maxLevel{maxLevel}, probability{probability} {
   35|      2|  assert(maxLevel > 0 && probability >= 0 && probability < 100);
   36|      2|  head = new SNode(INT_MIN);
   37|      2|  tail = new SNode(INT_MAX);
   38|     12|  for (int currLevel = 0; currLevel < maxLevel; currLevel++) {
   39|     10|    head->forward.push_back(tail);
   40|     10|    head->backward.push_back(nullptr);
   41|     10|    tail->backward.push_back(head);
   42|     10|    tail->forward.push_back(nullptr);
   43|     10|  }
   44|      2|}
   45|       |
   46|     21|bool SkipList::shouldInsertAtHigher() const {
   47|     21|  return rand() % 100 < probability;
   48|     21|}
   49|       |
   50|     10|SNode *SkipList::getNode(int value) const {
   51|     10|  SNode *temp = head;
   52|     45|  for (int currLevel = maxLevel - 1; currLevel >= 0; currLevel--) {
   53|     46|    while (temp->value != tail->value &&
   54|     46|           temp->forward[currLevel]->value <= value) {
   55|     11|      temp = temp->forward[currLevel];
   56|     11|      if (temp->value == value) {
   57|      7|        return temp;
   58|      7|      }
   59|     11|    }
   60|     42|  }
   61|     10|  return temp;
   62|     10|}
   63|       |
   64|     11|vector<SNode *> SkipList::getBeforeNodes(int value) const {
   65|     11|  vector<SNode *> ret;
   66|     11|  SNode *temp = head;
   67|     66|  for (int currLevel = maxLevel - 1; currLevel >= 0; currLevel--) {
   68|     66|    while (temp->value != tail->value &&
   69|     66|           temp->forward[currLevel]->value <= value) {
   70|     11|      temp = temp->forward[currLevel];
   71|     11|    }
   72|     55|    ret.insert(ret.begin(), temp);
   73|     55|  }
   74|     11|  return ret;
   75|     11|}
   76|       |
   77|     13|bool SkipList::add(int value) {
   78|     13|  if (value == head->value || value == tail->value) {
   79|      2|    return false;
   80|      2|  }
   81|     11|  int insertLevel = 0;
   82|     11|  auto insert = new SNode(value);
   83|     11|  vector<SNode *> vec = getBeforeNodes(value);
   84|     11|  if (vec[0]->value == value) {
   85|      2|    delete insert;
   86|      2|    return false;
   87|      2|  }
   88|     21|  do {
   89|     21|    SNode *keep = vec[insertLevel]->forward[insertLevel];
   90|     21|    insert->forward.push_back(vec[insertLevel]->forward[insertLevel]);
   91|     21|    vec[insertLevel]->forward[insertLevel] = insert;
   92|     21|    insert->backward.push_back(vec[insertLevel]);
   93|     21|    keep->backward[insertLevel] = insert;
   94|     21|    insertLevel++;
   95|     21|  } while (shouldInsertAtHigher() && insertLevel < maxLevel);
   96|      9|  return true;
   97|      9|}
   98|       |
   99|      2|bool SkipList::add(const vector<int> &values) {
  100|      2|  bool ret = true;
  101|      5|  for (int value : values) {
  102|      5|    if (!add(value)) {
  103|      2|      ret = false;
  104|      2|    }
  105|      5|  }
  106|      2|  return ret;
  107|      2|}
  108|       |
  109|      2|SkipList::~SkipList() {
  110|      2|  // need to delete individual nodes
  111|      2|  SNode *grimReaper = head;
  112|     14|  while (grimReaper != nullptr) {
  113|     12|    SNode *next = grimReaper->forward[0];
  114|     12|    delete grimReaper;
  115|     12|    grimReaper = next;
  116|     12|  }
  117|      2|}
  118|       |
  119|      2|bool SkipList::remove(int data) {
  120|      2|  SNode *temp = getNode(data);
  121|      2|  if (temp->value != data) {
  122|      1|    return false;
  123|      1|  }
  124|      4|  for (int currLevel = temp->forward.size() - 1; currLevel >= 0; currLevel--) {
  125|      3|    temp->forward[currLevel]->backward[currLevel] = temp->backward[currLevel];
  126|      3|    temp->backward[currLevel]->forward[currLevel] = temp->forward[currLevel];
  127|      3|  }
  128|      1|  delete temp;
  129|      1|  return true;
  130|      1|}
  131|       |
  132|      8|bool SkipList::contains(int data) const { return getNode(data)->value == data; }

Sun Nov 22 23:35:08 PST 2020
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
